import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as n,b as s,d as e,e as t}from"./app-Bfq3bq7T.js";const d={},p=t(`<p>因为参加了学校的区块链竞赛，于是需要学习一下以太坊平台的智能合约写法，sadly，这个语言相当有一点独特，于是特开了一点文档记录一下学习的过程。</p><h2 id="solidity是什么" tabindex="-1"><a class="header-anchor" href="#solidity是什么" aria-hidden="true">#</a> Solidity是什么？</h2><blockquote><p>Solidity 是一门面向合约的、为实现智能合约而创建的高级编程语言。智能合约是管理以太坊状态里账户行为的程序。 —— Solidity 中文文档</p></blockquote><p>Solidity是一种写起来类似面向对象语言的针对智能合约设计的高级语言。</p><p>不过Solidity并不适用于单独开发应用，只适合开发合约。</p><h2 id="基本语法和结构" tabindex="-1"><a class="header-anchor" href="#基本语法和结构" aria-hidden="true">#</a> 基本语法和结构</h2><p>Solidity的单个文件比较类似于Java等面向对象语言中的源文件，<code>.sol</code>文件中包含一个或多个合约，有这样的结构：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">//SPDX-License-Identifier: GPL-3.0</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.4</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">SimpleContract</span> <span class="token punctuation">{</span>
    <span class="token comment">// &#39;&#39;&#39;</span>
    <span class="token comment">// 合约内容</span>
    <span class="token comment">// &#39;&#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),r={href:"https://learnblockchain.cn/docs/solidity/style-guide.html",target:"_blank",rel:"noopener noreferrer"},u=t(`<h3 id="源文件结构" tabindex="-1"><a class="header-anchor" href="#源文件结构" aria-hidden="true">#</a> 源文件结构</h3><h4 id="spdx版权许可标识" tabindex="-1"><a class="header-anchor" href="#spdx版权许可标识" aria-hidden="true">#</a> SPDX版权许可标识</h4><p>首先从<code>//SPDX-License-Identifier: GPL-3.0</code>起始的这一部分开始，这是Solidity的SPDX版权许可标识，Solidity要求在任何一个源文件中都应该以一个这样的开源许可证注释作为起始。</p><p>如果不需要开源代码，则应将其设置为<code>UNLICENSED</code></p><h4 id="pragma版本标识" tabindex="-1"><a class="header-anchor" href="#pragma版本标识" aria-hidden="true">#</a> pragma版本标识</h4><p>solidity用pragma关键字来告诉编译器如何编译。</p><p>可以直接指定编译器版本的范围，像这样：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">&gt;=</span><span class="token version number">0.4.16</span> <span class="token operator">&lt;</span><span class="token version number">0.9.0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以用^符号来指定其大于等于某个版本但是小于下一个重大更新版本：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.5.2</span><span class="token punctuation">;</span> <span class="token comment">// 这样的标识意味着编译器版本可以在0.5.2和0.6.0之间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="合约结构" tabindex="-1"><a class="header-anchor" href="#合约结构" aria-hidden="true">#</a> 合约结构</h3><h4 id="合约" tabindex="-1"><a class="header-anchor" href="#合约" aria-hidden="true">#</a> 合约</h4><p>solidity中的<code>合约（Contract）</code>近似于其他语言中<code>类（class）</code>的概念。</p><p>合约以<code>contract</code>关键字起始，通过花括号包裹合约的内容来标识层级关系。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">BaseContract</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过is关键字来声明一个合约是从另一个合约继承的，并且solidity的继承特性和python非常相似，支持多重继承：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">ContractA</span> <span class="token keyword">is</span> MotherContract <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>


<span class="token keyword">contract</span> <span class="token class-name">ContractB</span> <span class="token keyword">is</span> MotherContract<span class="token punctuation">,</span> FatherContract <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不建议多重继承，类似Python，多重继承会让代码关系变得过于复杂，所以只在必要的时候使用吧。</p></div><h4 id="状态变量" tabindex="-1"><a class="header-anchor" href="#状态变量" aria-hidden="true">#</a> 状态变量</h4><blockquote><p>状态变量是永久地存储在合约存储中的值。</p></blockquote><p>类似于Python中声明变量的操作，但是Solidity本身是一种静态类型的语言，需要显式的声明变量对应的类型。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">TinyStorage</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> storedXlbData<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),k=n("code",null,"Bool",-1),m=n("code",null,"false",-1),v={href:"https://learnblockchain.cn/docs/solidity/control-structures.html#default-value",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>Solidity预置了如下的变量类型：</p><table><thead><tr><th>类型</th><th>范围</th></tr></thead><tbody><tr><td>intx</td><td>无符号整型，上限2的x次方</td></tr><tr><td>unitx</td><td>有符号整型，上限2的x次方</td></tr><tr><td>bool</td><td>布尔类型</td></tr><tr><td>address</td><td>地址类型，保存一个二十字节的地址</td></tr><tr><td>bytesx</td><td>定长字节数组，x为字节位数</td></tr></tbody></table><p>同样的，Solidity支持字面形式的常量使用（类似大多数编程语言）</p><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h4><blockquote><p>函数是代码的可执行单元。函数通常在合约内部定义，但也可以在合约外定义。</p></blockquote><p>一起来实现一个简单的函数：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> sum<span class="token punctuation">;</span>   <span class="token comment">// 定义一个有符号整型变量sum</span>
    <span class="token keyword">function</span> taker <span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">,</span> <span class="token builtin">uint</span> b<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// 定义函数taker，函数有两个有符号整型内部变量a和b，可以被外部访问</span>
        sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token comment">// 将a和b的和赋值给sum</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数有返回值的时候，我们需要用<code>returns</code>关键字来显式的指定函数返回了什么。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">arithmetic</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">,</span> <span class="token builtin">uint</span> b<span class="token punctuation">)</span>
    <span class="token keyword">public</span>
    <span class="token keyword">pure</span>
    <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> sum<span class="token punctuation">,</span> <span class="token builtin">uint</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        product <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
        <span class="token comment">// 如果觉得打一遍变量名很麻烦，也可以这么写</span>
        <span class="token comment">// return (a + b,a * b);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">注</p><p>如果使用 <code>return</code> 提前退出有返回值的函数， 必须在用 <code>return</code> 时提供返回值。</p></div><p>类似于Java和C#，Solidity也可以对函数赋予类型修饰关键字。</p><p>在Solidity中，还有<code>view</code>（视图函数）和<code>pure</code>（纯函数）两种类型的函数。</p><p>对于视图函数<code>view</code>修饰的函数，要保证这个函数的状态不被修改，也就是说，视图函数只能在本地运行（不消耗gas），它可以被读取状态但是不能被修改状态。</p><p>这些操作会被视为修改了函数的状态：</p><ul><li>修改状态变量。</li><li>产生事件。</li><li>创建其它合约。</li><li>使用 selfdestruct。</li><li>通过调用发送以太币。</li><li>调用任何没有标记为 view 或者 pure 的函数。</li><li>使用低级调用。</li><li>使用包含特定操作码的内联汇编。</li></ul><p>而纯函数<code>pure</code>修饰的函数则是在<code>view</code>的基础上，需要保证不读取也不修改函数的状态，也就是说要在前面的列表中再加几项：</p><ul><li>读取状态变量。</li><li>访问 address(this).balance 或者 &lt;address&gt;.balance。</li><li>访问 block，tx， msg 中任意成员 （除 msg.sig 和 msg.data 之外）。</li><li>调用任何未标记为 pure 的函数。</li><li>使用包含某些操作码的内联汇编。</li></ul>`,17),h={href:"https://learnblockchain.cn/docs/solidity/contracts.html#special-functions",target:"_blank",rel:"noopener noreferrer"},y=n("h4",{id:"事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件","aria-hidden":"true"},"#"),s(" 事件")],-1),g=n("blockquote",null,[n("p",null,"事件是能方便地调用以太坊虚拟机日志功能的接口。Solidity 事件是EVM的日志功能之上的抽象。 应用程序可以通过以太坊客户端的RPC接口订阅和监听这些事件。")],-1),_=n("p",null,"事件晚点再写，疑似有点太抽象了。",-1);function f(x,S){const a=o("ExternalLinkIcon");return l(),c("div",null,[p,n("p",null,[s("Solidity的类名命名遵守驼峰式命名，每个词的首字母和缩写的全部字母需要大写，整体代码缩进等风格比较接近Python，详见"),n("a",r,[s("编程风格指南"),e(a)]),s("。")]),u,n("p",null,[s("作为一门针对合约设计的语言，Solidity不允许变量的值为undefined或者null、None这样的空值。在声明变量的时候事实上会先给变量赋予一个默认值，如当变量类型为"),k,s("时，默认值为"),m,s("，详情参考"),n("a",v,[s("作用域和声明"),e(a)]),s("。")]),b,n("p",null,[s("另外的，Solidity还为一些特殊用途设计了一些特殊函数，详见"),n("a",h,[s("特别的函数"),e(a)]),s("。")]),y,g,_])}const P=i(d,[["render",f],["__file","intro.html.vue"]]);export{P as default};
